# Any items in the `env` entry below will be added as
# environment variables. Some entries may override variables
# set by alacritty itself.
env:
  # TERM variable
  #
  # This value is used to set the `$TERM` environment variable for
  # each instance of Alacritty. If it is not present, alacritty will
  # check the local terminfo database and use `alacritty` if it is
  # available, otherwise `xterm-256color` is used.
  TERM: xterm-256color

window:
  # Window dimensions (changes require restart)
  #
  # Specified in number of columns/lines, not pixels.
  # If both are `0`, this setting is ignored.
  dimensions:
    columns: 100
    lines: 30

  # Window position (changes require restart)
  #
  # Specified in number of pixels.
  # If the position is not set, the window manager will handle the placement.
  #position:
  #  x: 0
  #  y: 0

  # Window padding (changes require restart)
  #
  # Blank space added around the window in pixels. This padding is scaled
  # by DPI and the specified value is always added at both opposing sides.
  padding:
    x: 8 
  #  y: 0

  # Spread additional padding evenly around the terminal content.
  dynamic_padding: true

  # Window decorations
  decorations: buttonless 
  #     - full: Borders and title bar
  #     - none: Neither borders nor title bar
  #     - transparent: Title bar, transparent background and title bar buttons
  #     - buttonless: Title bar, transparent background, but no title bar buttons

  startup_mode: Maximized # (changes require restart)
  #   - Windowed
  #   - Maximized
  #   - Fullscreen
  #   - SimpleFullscreen

  # Window title
  title: Ala 

  # Opacity
  opacity: 0.97
  

scrolling:
  history: 10000
  # Maximum number of lines in the scrollback buffer.
  # Specifying '0' will disable scrolling.

  multiplier: 3
  # Scrolling distance multiplier.

# Font
font:
  # Normal (roman) font face
  size: 24
  normal:
    family: Jetbrains Mono 
    style: Light 

  # Bold font face
  bold:
    family: Jetbrains Mono 
    style: Bold

  # Italic font face
  italic:
    family: Jetbrains Mono 
    style: ExtraBold 

  # Bold italic font face
  bold_italic:
    family: Jetbrains Mono 
    style: Bold Italic

  # Point size
    size: 20.0

    # Bright and dim foreground colors
    #
    # The dimmed foreground color is calculated automatically if it is not present.
    # If the bright foreground color is not set, or `draw_bold_text_with_bright_colors`
    # is `false`, the normal foreground color will be used.
    #dim_foreground: '#828482'
    #bright_foreground: '#eaeaea'


  # Vi mode cursor colors
  #
  # Colors for the cursor when the vi mode is active. If these are unset, the
  # cursor color will be the inverse of the cell color.
  vi_mode_cursor:
    text: '#000000'
    cursor: '#ffffff'

# Bell
#
# The bell is rung every time the BEL control character is received.
#bell:
  # Visual Bell Animation
  #
  # Animation effect for flashing the screen when the visual bell is rung.
  #
  # Values for `animation`:
  #   - Ease
  #   - EaseOut
  #   - EaseOutSine
  #   - EaseOutQuad
  #   - EaseOutCubic
  #   - EaseOutQuart
  #   - EaseOutQuint
  #   - EaseOutExpo
  #   - EaseOutCirc
  #   - Linear
  animation: EaseOutExpo

  # Duration of the visual bell flash in milliseconds. A `duration` of `0` will
  # disable the visual bell animation.
  duration: 10

  # Visual bell animation color.
  color: '#ffffff'

  # Bell Command
  #
  # This program is executed whenever the bell is rung.
  #
  # When set to `command: None`, no command will be executed.
  #
  # Example:
  #   command:
  #     program: notify-send
  #     args: ["Hello, World!"]
  #
  command:
    program: noti
    #    args: ["hello world"]

#selection:
  #semantic_escape_chars: ",│`|:\"' ()[]{}<>\t"

  # When set to `true`, selected text will be copied toecho -n '\007' the primary clipboard.
save_to_clipboard: true

# Allow terminal applications to change Alacritty's window title.
window.dynamic_title: true


cursor:
  style: Block
  # Values for `style`:
  #   - ▇ Block
  #   - _ Underline
  #   - | Beam

# blinking
cursor:
  style:
    blinking: Always
    blink_interval: 200



  # Vi mode cursor style
  #
  # If the vi mode cursor style is `None` or not specified, it will fall back to
  # the style of the active value of the normal cursor.
  #
  # See `cursor.style` for available options.
  vi_mode_style: Beam

  # If this is `true`, the cursor will be rendered as a hollow box when the
  # window is not focused.
  unfocused_hollow: true

  # Thickness of the cursor relative to the cell width as floating point number
  # from `0.0` to `1.0`.
  #thickness: 0.15

# Live config reload (changes require restart)
live_config_reload: true



# You can set `shell.program` to the path of your favorite shell, e.g. `/bin/fish`.
# Entries in `shell.args` are passed unmodified as arguments to the shell.
shell:
  program: /bin/zsh
  args:
  - --login

# Startup directory
#
# Directory the shell is started in. If this is unset, or `None`, the working
# directory of the parent process will be used.
working_directory: None


mouse:
  # Click settings
  #
  # The `double_click` and `triple_click` settings control the time
  # alacritty should wait for accepting multiple clicks as one double
  # or triple click.
  #double_click: { threshold: 300 }
  #triple_click: { threshold: 300 }

  # If this is `true`, the cursor is temporarily hidden when typing.
  hide_when_typing: true

  #url:
    # URL launcher
    #
    # This program is executed when clicking on a text which is recognized as a URL.
    # The URL is always added to the command as the last parameter.
    #
    # When set to `launcher: None`, URL launching will be disabled completely.
    #
    # Default:
    #   - (macOS) open
    #   - (Linux/BSD) xdg-open
    #   - (Windows) explorer
    #launcher:
    #  program: xdg-open
    #  args: []

    # URL modifiers
    #
    # These are the modifiers that need to be held down for opening URLs when clicking
    # on them. The available modifiers are documented in the key binding section.
    #modifiers: None

# Mouse bindings
#
# Mouse bindings are specified as a list of objects, much like the key
# bindings further below.
#
# To trigger mouse bindings when an application running within Alacritty captures the mouse, the
# `Shift` modifier is automatically added as a requirement.
#
# Each mouse binding will specify a:
#
# - `mouse`:
#
#   - Middle
#   - Left
#   - Right
#   - Numeric identifier such as `5`
#
# - `action` (see key bindings)
#
# And optionally:
#
# - `mods` (see key bindings)
#mouse_bindings:
#  - { mouse: Middle, action: PasteSelection }

# Key bindings
#
# Key bindings are specified as a list of objects. For example, this is the
# default paste binding:
#
# `- { key: V, mods: Control|Shift, action: Paste }`
#
# Each key binding will specify a:
#
# - `key`: Identifier of the key pressed
#
#    - A-Z
#    - F1-F24
#    - Key0-Key9
#
#    A full list with available key codes can be found here:
#    https://docs.rs/glutin/*/glutin/event/enum.VirtualKeyCode.html#variants
#
#    Instead of using the name of the keys, the `key` field also supports using
#    the scancode of the desired key. Scancodes have to be specified as a
#    decimal number. This command will allow you to display the hex scancodes
#    for certain keys:
#
#       `showkey --scancodes`.
#
# Then exactly one of:
#
# - `chars`: Send a byte sequence to the running application
#
#    The `chars` field writes the specified string to the terminal. This makes
#    it possible to pass escape sequences. To find escape codes for bindings
#    like `PageUp` (`"\x1b[5~"`), you can run the command `showkey -a` outside
#    of tmux. Note that applications use terminfo to map escape sequences back
#    to keys. It is therefore required to update the terminfo when changing an
#    escape sequence.
#
# - `action`: Execute a predefined action
#
#   - ToggleViMode
#   - Copy
#   - Paste
#   - PasteSelection
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Minimize
#   - Quit
#   - ToggleFullscreen
#   - SpawnNewInstance
#   - ClearLogNotice
#   - ClearSelection
#   - ReceiveChar
#   - None
#
#   (`mode: Vi` only):
#   - Open
#   - Up
#   - Down
#   - Left
#   - Right
#   - First
#   - Last
#   - FirstOccupied
#   - High
#   - Middle
#   - Low
#   - SemanticLeft
#   - SemanticRight
#   - SemanticLeftEnd
#   - SemanticRightEnd
#   - WordRight
#   - WordLeft
#   - WordRightEnd
#   - WordLeftEnd
#   - Bracket
#   - ToggleNormalSelection
#   - ToggleLineSelection
#   - ToggleBlockSelection
#   - ToggleSemanticSelection
#
#   (macOS only):
#   - ToggleSimpleFullscreen: Enters fullscreen without occupying another space
#
#   (Linux/BSD only):
#   - CopySelection: Copies into selection buffer
#
# - `command`: Fork and execute a specified command plus arguments
#
#    The `command` field must be a map containing a `program` string and an
#    `args` array of command line parameter strings. For example:
#       `{ program: "alacritty", args: ["-e", "vttest"] }`
#
# And optionally:
#
# - `mods`: Key modifiers to filter binding actions
#
#    - Command
#    - Control
#    - Option
#    - Super
#    - Shift
#    - Alt
#
#    Multiple `mods` can be combined using `|` like this:
#       `mods: Control|Shift`.
#    Whitespace and capitalization are relevant and must match the example.
#
# - `mode`: Indicate a binding for only specific terminal reported modes
#
#    This is mainly used to send applications the correct escape sequences
#    when in different modes.
#
#    - AppCursor
#    - AppKeypad
#    - Alt
#
#    A `~` operator can be used before a mode to apply the binding whenever
#    the mode is *not* active, e.g. `~Alt`.
#
# Bindings are always filled by default, but will be replaced when a new
# binding with the same triggers is defined. To unset a default binding, it can
# be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for
# a no-op if you do not wish to receive input characters for that binding.
#
# If the same trigger is assigned to multiple actions, all of them are executed
# at once.
key_bindings:
  - { key: V,        mods: Control|Shift, action: Paste            }
  - { key: C,        mods: Control|Shift, action: Copy             }
  - { key: Insert,   mods: Shift,         action: PasteSelection   }
  - { key: Key0,     mods: Control,       action: ResetFontSize    }
  - { key: Equals,   mods: Control,       action: IncreaseFontSize }
  - { key: Plus,     mods: Control,       action: IncreaseFontSize }
  - { key: Minus,    mods: Control,       action: DecreaseFontSize }
  - { key: J,        mods: Command|Alt,       action: ScrollLineDown}
  - { key: K,        mods: Command|Alt,       action: ScrollLineUp}
  - { key: N,        mods: Command,       action: CreateNewWindow}

 # # Vi Mode
 #  - { key: Space,  mods: Shift|Control, mode: Vi, action: ScrollToBottom          }
  - { key: V,  mods: Command|Shift|Control,           action: ToggleViMode            }
 #  - { key: Escape,                      mode: Vi, action: ClearSelection          }
 #  - { key: I,                           mode: Vi, action: ScrollToBottom          }
 #  - { key: I,                           mode: Vi, action: ToggleViMode            }
 #  - { key: Y,      mods: Control,       mode: Vi, action: ScrollLineUp            }
 #  - { key: E,      mods: Control,       mode: Vi, action: ScrollLineDown          }
 #  - { key: G,                           mode: Vi, action: ScrollToTop             }
 #  - { key: G,      mods: Shift,         mode: Vi, action: ScrollToBottom          }
 #  - { key: B,      mods: Control,       mode: Vi, action: ScrollPageUp            }
 #  - { key: F,      mods: Control,       mode: Vi, action: ScrollPageDown          }
 #  - { key: U,      mods: Control,       mode: Vi, action: ScrollHalfPageUp        }
 #  - { key: D,      mods: Control,       mode: Vi, action: ScrollHalfPageDown      }
 #  - { key: Y,                           mode: Vi, action: Copy                    }
 #  - { key: Y,                           mode: Vi, action: ClearSelection          }
 #  - { key: Copy,                        mode: Vi, action: ClearSelection          }
 #  - { key: V,                           mode: Vi, action: ToggleNormalSelection   }
 #  - { key: V,      mods: Shift,         mode: Vi, action: ToggleLineSelection     }
 #  - { key: V,      mods: Control,       mode: Vi, action: ToggleBlockSelection    }
 #  - { key: V,      mods: Alt,           mode: Vi, action: ToggleSemanticSelection }
 #  - { key: Return,                      mode: Vi, action: Open                    }
 #  - { key: K,                           mode: Vi, action: Up                      }
 #  - { key: J,                           mode: Vi, action: Down                    }
 #  - { key: H,                           mode: Vi, action: Left                    }
 #  - { key: L,                           mode: Vi, action: Right                   }
 #  - { key: Up,                          mode: Vi, action: Up                      }
 #  - { key: Down,                        mode: Vi, action: Down                    }
 #  - { key: Left,                        mode: Vi, action: Left                    }
 #  - { key: Right,                       mode: Vi, action: Right                   }
 #  - { key: Key0,                        mode: Vi, action: First                   }
 #  - { key: Key4,   mods: Shift,         mode: Vi, action: Last                    }
 #  - { key: Key6,   mods: Shift,         mode: Vi, action: FirstOccupied           }
 #  - { key: H,      mods: Shift,         mode: Vi, action: High                    }
 #  - { key: M,      mods: Shift,         mode: Vi, action: Middle                  }
 #  - { key: L,      mods: Shift,         mode: Vi, action: Low                     }
 #  - { key: B,                           mode: Vi, action: SemanticLeft            }
 #  - { key: W,                           mode: Vi, action: SemanticRight           }
 #  - { key: E,                           mode: Vi, action: SemanticRightEnd        }
 #  - { key: B,      mods: Shift,         mode: Vi, action: WordLeft                }
 #  - { key: W,      mods: Shift,         mode: Vi, action: WordRight               }
 #  - { key: E,      mods: Shift,         mode: Vi, action: WordRightEnd            }
 #  - { key: Key5,   mods: Shift,         mode: Vi, action: Bracket                 }
 #  # - { key: Slash,                       mode: Vi, action: Search                  }
 #  # - { key: Slash,  mods: Shift,         mode: Vi, action: SearchReverse           }
 #  - { key: N,                           mode: Vi, action: SearchNext              }
 #  - { key: N,      mods: Shift,         mode: Vi, action: SearchPrevious          }



#debug:
  # Display the time it takes to redraw each frame.
  #render_timer: false

  # Keep the log file after quitting Alacritty.
  #persistent_logging: false

  # Log level
  #
  # Values for `log_level`:
  #   - None
  #   - Error
  #   - Warn
  #   - Info
  #   - Debug
  #   - Trace
  #log_level: Warn

  # Print all received window events.
  #print_events: false

# Colors (Arcoiris)
colors:
  normal:
    black: '#333333'
    blue: '#518BFC'
    cyan: '#63FAD5'
    green: '#12C258'
    magenta: '#E37BD9'
    red: '#DA2700'
    white: '#BAB2B2'
    yellow: '#FFC656'
  bright:
    black: '#777777'
    blue: '#B3E8F3'
    cyan: '#BCFFC7'
    green: '#E3F6AA'
    magenta: '#CBBAF9'
    red: '#FFB9B9'
    white: '#EFEFEF'
    yellow: '#FFDDAA'
  primary:
    background: '#201F1E'
    foreground: '#EEE4D9'
  selection:
    background: '#25524A'
    text: '#F3FFFD'
  cursor:
    cursor: '#7A1C1C'
    text: '#FFFBF2'
