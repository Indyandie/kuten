[[language]]
name = "bash"
indent = { tab-width = 4, unit = "    " }
formatter = { command = 'shfmt', args = ["-i", "4"] }

# HTML

[language-server.emmet-ls]
command = "emmet-ls"
args = ["--stdio"]

[language-server.vscode-html]
command = "vscode-html-language-server"
args = ["--stdio"]

[[language]]
name = "html"
language-servers = ["vscode-html", "emmet-ls"]
formatter = { command = 'prettier', args = ["--parser", "html"] }

# CSS

[[language]]
name = "css"
formatter = { command = 'prettier', args = ["--parser", "css"] }

# JS

[language-server.deno-lsp]
command = "deno"
args = ["lsp"]
environment = { NO_COLOR = "1" }

[language-server.deno-lsp.config.deno]
enable = true
unstable = true
suggest = { completeFunctionCalls = false, imports = { hosts = { "https://deno.land" = true } } }
# inlay hints
inlayHints.parameterNames.enabled = "all"
inlayHints.parameterTypes.enabled = true
inlayHints.variableTypes.enabled = true
inlayHints.propertyDeclarationTypes.enabled = true
inlayHints.functionLikeReturnTypes.enabled = true
inlayHints.enumMemberValues.enabled = true

[[language]]
name = "javascript"
shebangs = ["deno"]
roots = ["deno.json", "deno.jsonc"]
language-servers = ["deno-lsp"]
formatter = { command = 'deno', args = [
  "fmt",
  "-",
  "--ext",
  "js",
  "--no-semicolons",
  "--single-quote",
] }

[[language]]
name = "jsx"
shebangs = ["deno"]
roots = ["deno.json", "deno.jsonc"]
language-servers = ["deno-lsp"]
formatter = { command = 'deno', args = [
  "fmt",
  "-",
  "--ext",
  "jsx",
  "--no-semicolons",
  "--single-quote",
] }

# typescript

[[language]]
name = "typescript"
shebangs = ["deno"]
roots = ["deno.json", "deno.jsonc"]
language-servers = ["deno-lsp"]
formatter = { command = 'deno', args = ["fmt", "-", "--ext", "ts"] }

[[language]]
name = "tsx"
shebangs = ["deno"]
roots = ["deno.json", "deno.jsonc"]
language-servers = ["deno-lsp"]
formatter = { command = 'deno', args = ["fmt", "-", "--ext", "tsx"] }

# Astro
[language-server.astro-ls]
command = "astro-ls"
args = ["--stdio"]
# to get the tsdk if typescript is install globally run
# npm list -g | head -1
# config = { typescript = { tsdk = "" }, environment = "node" }


[[language]]
name = "astro"
auto-format = true
language-servers = ["astro-ls"]
formatter = { command = 'prettier', args = [
  "--parser",
  "astro",
  "--print-width",
  "100000000000000000000",
] }

### formatter requires the following

### install prettier locally on the project
### https://github.com/withastro/prettier-plugin-astro

### /** @type {import("prettier").Config} */
### export default {
###   plugins: ['prettier-plugin-astro'],
###   overrides: [
###     {
###       files: '*.astro',
###       options: {
###         parser: 'astro',
###       },
###     },
###   ],
### };

# Markdown

[language-server.ltex-ls.config]
ltex.disabledRules = { "en-US" = ["PROFANITY"], "en-GB" = ["PROFANITY"] }
ltex.dictionary = { "en-US" = ["builtin"], "en-GB" = ["builtin"] }

[[language]]
name = "markdown"
file-types = [
  "md",
  "mdx",
  "markdown",
  "mkd",
  "mkdn",
  "mdwn",
  "mdown",
  "markdn",
  "mdtxt",
  "mdtext",
  "workbook",
  { glob = "PULLREQ_EDITMSG" },
]
language-servers = [
  "marksman",
  "ltex-ls",
  "markdown-oxide",
  "vscode-html-language-server",
]
formatter = { command = 'deno', args = [
  "fmt",
  "-",
  "--ext",
  "md",
  "--prose-wrap=never",
] }

[language.auto-pairs]
'~' = '~'
'_' = '_'
'(' = ')'
'{' = '}'
'[' = ']'
'"' = '"'

# TOML

# ## Installation 

# ```sh
# cargo install taplo-cli --locked --features lsp
# ```
# sudo ln -s ~/.cargo/bin/taplo /bin

[[language]]
name = "toml"
formatter = { command = "taplo", args = ["format", "-"] }

# SQL

[language-server.sql-language-server]
command = "sql-language-server"
args = ["up", "--method", "stdio"]
formatter = { command = "sqlformat", args = [
  "--reindent",
  "--indent_width",
  "2",
  "--keywords",
  "upper",
  "--identifiers",
  "lower",
  "-",
] }

[language-server.sqls]
command = "sqls"

[[language]]
name = "sql"
language-servers = ["sql-language-server", "sqls"]

# py

[[language]]
name = "python"
formatter = { command = "black", args = ["--quiet", "-"] }

# JSON

[[language]]
name = "json"
formatter = { command = 'deno', args = ["fmt", "-", "--ext", "json"] }

# nix

[[language]]
name = "nix"
formatter = { command = "nixpkgs-fmt" }

# YAML

[language-server.yaml-language-server.config.yaml]
format = { enable = true }
validation = true

[[language]]
name = "yaml"
formatter = { command = 'prettier', args = ["--parser", "yaml"] }
